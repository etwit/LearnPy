#!/usr/bin/env python
#_*_coding:utf-8_*_
'''
Created on 2017年9月22日

@author: Ethan Wong
'''
#Select vs poll &epoll
#异步io模型
#最大端口数 65535
#ulimit -n 查看

#select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机
#制使一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），
#能够通知程序进行相应的读写操作。
#select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪
#后自己负责进行读写，也就是说这个读写过程是阻塞的
#异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。

#select:
#1.支持所有平台。2只支持水平触发
#3.默认单个进程能够监视的文件描述符的数量存在最大限制，在linux上默认只支持1024个socket
#4.内核准备好数据后通知用户有数据了，但不告诉用户是哪个连接有数据，
#用户只能通过轮询的方式来获取数据

#poll:
#1.没有了最大文件描述符数量的限制.2.只支持水平触发

#epoll:
#1.Linux2.6才出现的epoll没有最大文件描述符数量的限制
#2.同时支持水平触发和边缘触发
#3.不支持windows平台
#4.内核准备好数据以后会通知用户哪个连接有数据了
#5.使用mmap加速内核与用户空间的消息传递
#6.IO效率不随fd数目增加而线性下降
